import Web3 from 'web3'
import {
  Entity,
  EthereumPlasmaClient,
  CryptoUtils,
  NonceTxMiddleware,
  SignedTxMiddleware,
  Address,
  LocalAddress,
  DAppChainPlasmaClient,
  Client,
  createJSONRPCClient
} from 'loom-js'

export const DEFAULT_GAS = '3141592'
export const CHILD_BLOCK_INTERVAL = 1000

// TODO: these should be pulled out of a config file generated by a Truffle migration
export const ADDRESSES = {
  validator_manager: '0xd8a512EBD6fd82f44dFFD968EEB0835265497d20',
  root_chain: '0x494748735312D87C54Ff36E9dc71f90fb800D7Df',
  token_contract: '0x6427A6200Bed37FC1e512BdeA49D25Aa9089CF47'
}

// TODO: these should be pulled out of a config file generated by a Truffle migration
export const ACCOUNTS = {
    authority: '0xf942d5d524ec07158df4354402bfba8d928c99d0ab34d0799a6158d56156d986',
    alice: '0x88f37cfbaed8c0c515c62a17a3a1ce2f397d08bbf20dcc788b69f11b5a5c9791',
    bob: '0xf4ebc8adae40bfc741b0982c206061878bffed3ad1f34d67c94fa32c3d33eac8',
    charlie: '0xca67021a16478270ede4fddd65d0c031c75cd36c13b6a56bcb767928c1c2cf86',
    dan: '0x9955b1e01b2a7d8c22df41754d48b08dff3c0f3dd79d43e091c6311f97f0605a',
    mallory: '0x130137aa9a7fbc7cadc98c079cda47a999ff41931d9feaab621855beceed71f7',
    eve: '0xead83d04f741d2b3ab50be1299c18aa1a82c241606861a9a6d3122443496522d',
    trudy: '0xe6e893ac9f1c1db066a8a83a376554084b0a786e4cdcd91559d68bd4a1dac396'
}

export function getTestUrls() {
  return {
    wsWriteUrl: process.env.TEST_LOOM_DAPP_WS_WRITE_URL || 'ws://127.0.0.1:46657/websocket',
    wsReadUrl: process.env.TEST_LOOM_DAPP_WS_READ_URL || 'ws://127.0.0.1:9999/queryws',
    httpWriteUrl: process.env.TEST_LOOM_DAPP_HTTP_WRITE_URL || 'http://127.0.0.1:46658/rpc',
    httpReadUrl: process.env.TEST_LOOM_DAPP_HTTP_READ_URL || 'http://127.0.0.1:46658/query'
  }
}

export function createTestEntity(web3: Web3, ethPrivateKey: string): Entity {
  const ethAccount = web3.eth.accounts.privateKeyToAccount(ethPrivateKey)
  const ethPlasmaClient = new EthereumPlasmaClient(web3, ADDRESSES.root_chain)
  const writer = createJSONRPCClient({ protocols: [{ url: getTestUrls().httpWriteUrl }] })
  const reader = createJSONRPCClient({ protocols: [{ url: getTestUrls().httpReadUrl }] })
  const dAppClient = new Client('default', writer, reader)
  // TODO: move keys to config file
  const privKey = CryptoUtils.generatePrivateKey()
  const pubKey = CryptoUtils.publicKeyFromPrivateKey(privKey)
  dAppClient.txMiddleware = [
    new NonceTxMiddleware(pubKey, dAppClient),
    new SignedTxMiddleware(privKey)
  ]
  const callerAddress = new Address('default', LocalAddress.fromPublicKey(pubKey))
  const dAppPlasmaClient = new DAppChainPlasmaClient({ dAppClient, callerAddress })
  return new Entity(web3, {
    ethAccount,
    ethPlasmaClient,
    dAppPlasmaClient,
    defaultGas: DEFAULT_GAS,
    childBlockInterval: CHILD_BLOCK_INTERVAL
  })
}
